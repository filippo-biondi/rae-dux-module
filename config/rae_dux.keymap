/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk {
    release-after-ms = <750>;
    quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};

#define BASE_L  0
#define SYM_L   1
#define NUM_L   2
#define FUN_L   3
#define DBG_L   4
#define NAV_L   5
#define COL_L   6
#define ITA_L   7
#define ITA_C_L 8

#define TAPPING_TERM 200
#define LONG_TAPPING_TERM 250
#define COMBO_TIME 40

/ {

// TO IMPLEMENT

    macros {
//        ZMK_MACRO(scope, wait-ms = <30>; tap-ms = <30>; bindings = <&kp COLON &kp COLON>;)
//        ZMK_MACRO(lambda, wait-ms = <30>; tap-ms = <30>; bindings = <&kp L &kp A &kp M &kp B &kp D &kp A>;)
        
        grave_accent: grave_accent_macro {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&kp GRAVE>, <&macro_param_1to1>, <&kp MACRO_PLACEHOLDER>;
        };
        acute_accent: acute_accent_macro {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&kp APOS>, <&macro_param_1to1>, <&kp MACRO_PLACEHOLDER>;
        };
        
        ZMK_MACRO(c_e, wait-ms = <30>; tap-ms = <30>; bindings = <&kp C &kp RA(APOS) &kp GRAVE &kp E>;)
        ZMK_MACRO(capital_c_e, wait-ms = <30>; tap-ms = <30>; bindings = <&kp LS(C) &kp RA(APOS) &kp GRAVE &kp E>;)
        ZMK_MACRO(not_equal, wait-ms = <30>; tap-ms = <30>; bindings = <&kp EXCL &kp EQUAL>;)
        ZMK_MACRO(col_sel, wait-ms = <50>; tap-ms = <50>; bindings = <&kp LCTRL &kt LCTRL &tog COL_L>;)
        ZMK_MACRO(deact_col, wait-ms = <50>; tap-ms = <50>; bindings = <&kt LCTRL &tog COL_L>;)
        ZMK_MACRO(deact_col_esc, wait-ms = <50>; tap-ms = <50>; bindings = <&kt LCTRL &tog COL_L &kp ESC>;)
    };


    combos {
        compatible = "zmk,combos";

        #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT, LAYERS) \
              combo_##NAME { \
                timeout-ms = <TIMEOUT>; \
                bindings = <BINDINGS>; \
                key-positions = <KEYPOS>; \
                layers = <LAYERS>; \
              };

        /*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
       │  0   1   2   3   4 │ │  5   6   7   8   9 │
       │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
       │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
                      ╰────────────╯ ╰────────────╯        */

        COMBO(caps_word_left, &caps_word, 13 14, COMBO_TIME, BASE_L)
        COMBO(caps_word_right, &caps_word, 15 16, COMBO_TIME, BASE_L)
        
        COMBO(key_repeat_left, &key_repeat, 31 13, COMBO_TIME, BASE_L)  
        COMBO(key_repeat_right, &key_repeat, 31 16, COMBO_TIME, BASE_L)
        
        COMBO(equal, &kp EQUAL, 31 34, COMBO_TIME, BASE_L)
        COMBO(underscore, &kp UNDER, 32 33, COMBO_TIME, BASE_L)
        COMBO(underscore_1, &kp UNDER, 31 33, COMBO_TIME, BASE_L)
        COMBO(underscore_2, &kp UNDER, 34 32, COMBO_TIME, BASE_L)
        COMBO(minus_1, &kp MINUS, 30 34, COMBO_TIME, BASE_L)
        COMBO(minus_2, &kp MINUS, 35 31, COMBO_TIME, BASE_L)

        COMBO(left_par, &kp LPAR, 12 13, COMBO_TIME, BASE_L NUM_L SYM_L)
        COMBO(right_par, &kp RPAR, 16 17, COMBO_TIME, BASE_L NUM_L SYM_L)
        COMBO(left_bracket, &kp LBKT, 11 13, COMBO_TIME, BASE_L NUM_L SYM_L)
        COMBO(right_bracket, &kp RBKT, 16 18, COMBO_TIME, BASE_L NUM_L SYM_L)
        COMBO(left_curly_bracket, &kp LEFT_BRACE, 31 12, COMBO_TIME, BASE_L NUM_L SYM_L)
        COMBO(right_curly_bracket, &kp RIGHT_BRACE, 31 17, COMBO_TIME, BASE_L NUM_L SYM_L)
        
        COMBO(plus, &kp PLUS, 23 26, COMBO_TIME, BASE_L NUM_L SYM_L)
        COMBO(times, &kp STAR, 22 27, COMBO_TIME, BASE_L NUM_L SYM_L)     
        COMBO(colon, &kp COLON, 13 16, COMBO_TIME, BASE_L NUM_L SYM_L)
        COMBO(semicolon, &kp SEMI, 12 17, COMBO_TIME, BASE_L NUM_L SYM_L)
        COMBO(caret, &kp CARET, 11 18, COMBO_TIME, BASE_L NUM_L SYM_L)
        COMBO(backslash, &kp BSLH, 10 19, COMBO_TIME, BASE_L NUM_L SYM_L)
        
        COMBO(debug, &tog DBG_L, 30 35, COMBO_TIME, BASE_L DBG_L)
    };

    behaviors {
        lhm: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            // hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
            hold-trigger-key-positions = <5 6 7 8 9 10 11 12 13 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
        };
        
        elhm: extreme_left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <LONG_TAPPING_TERM>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            // hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
            hold-trigger-key-positions = <5 6 7 8 9 13 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
        };

        rhm: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            // hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 16 17 18 19 20 21 22 23 24 30 31 32 33 34 35>;
        };
        
        erhm: extreme_right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <LONG_TAPPING_TERM>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            // hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 16 20 21 22 23 24 30 31 32 33 34 35>;
        };

        base_lt: base_layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM>;
//            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };

        macro_lt: macro_layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&td_e>;
        };

        rpt_lt: repeat_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&key_repeat>;
        };
        
#define TAP_DANCE(NAME, CODE) \
        td_##NAME: tap_dance_##NAME { \
        compatible = "zmk,behavior-tap-dance"; \
        #binding-cells = <0>; \
        tapping-term-ms = <TAPPING_TERM>; \
        bindings = <&grave_accent CODE>, <&acute_accent CODE>; \
        };
        
        TAP_DANCE(e, E)
        TAP_DANCE(a, A)
        TAP_DANCE(i, I)
        TAP_DANCE(o, O)
        TAP_DANCE(u, U)
        TAP_DANCE(e_capital, LS(E))
        TAP_DANCE(a_capital, LS(A))
        TAP_DANCE(i_capital, LS(I))
        TAP_DANCE(o_capital, LS(O))
        TAP_DANCE(u_capital, LS(U))
        
        quick_lt: quick_layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <0>;
            bindings = <&mo>, <&kp>;
            hold-while-undecided;
        };
       
       
        qhm: quick_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <350>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };

        power_off_td: tap_dance_sleep {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TAPPING_TERM>;
            bindings = <&none>, <&none>, <&kp LA(LG(LS(LC(GRAVE))))>;
        };
    };

	keymap {
		compatible = "zmk,keymap";

		base_layer {
			bindings = <
                   &kp Q        &kp W         &kp F                 &kp P               &kp B              &kp J              &kp L                &kp U                 &kp Y         &kp RA(APOS)
                   &elhm LALT A &elhm LGUI R  &lhm LSHIFT S         &lhm LCTRL T        &base_lt ITA_L G   &base_lt ITA_L M   &rhm LCTRL N         &rhm RSHIFT E         &erhm LGUI I  &erhm LALT O
                   &kp Z        &kp X         &kp C                 &kp D               &kp V              &kp K              &kp H                &kp COMMA             &kp DOT       &kp FSLH
		   /*&          &*/           &base_lt NAV_L ESC    &base_lt NUM_L BSPC &base_lt FUN_L TAB &kp RET            &base_lt SYM_L SPACE &base_lt NAV_L DEL    /*&           &*/
			>;
		};
		
		sym_layer {
			bindings = <
		   &none          &none         &none            &none              &none              &none           &none         &none               &none       &kp RA(APOS) 
                   &kp EXCL       &kp AT        &kp HASH         &kp DLLR           &kp PRCNT          &none           &sk LCTRL     &sk RSHIFT          &sk LGUI    &sk LALT
                   &kp BSLH       &kp PIPE      &kp TILDE        &kp AMPS           &kp GRAVE          &none           &none         &trans              &trans      &kp FSLH
                   /*&            &*/           &kp ESC          &kp BSPC           &kp TAB            &kp RET         &kp SPACE     &base_lt NAV_L DEL  /*&           &*/
			>;
		};
		
		num_layer {
			bindings = <
                   &none         &none           &none             &none              &none              &none         &kp N7         &kp N8                &kp N9      &kp RA(APOS)
                   &kp LALT      &lhm LGUI CARET &lhm LSHFT COMMA  &lhm LCTRL DOT     &none              &none         &kp N4         &kp N5                &kp N6      &kp N0
                   &none         &none           &kp COMMA         &none              &none              &none         &kp N1         &kp N2                &kp N3      &kp FSLH
		   /*&           &*/             &kp ESC           &kp BSPC           &kp TAB            &kp UNDER     &kp SPACE      &base_lt NAV_L MINUS  /*&         &*/
			>;
		};
		
		fun_layer {
			bindings = <
                   &kp C_SLEEP   &none         &none         &none            &none              &kp &none           &kp F7           &kp F8                   &kp F9        &power_off_td
                   &sk LALT      &sk LGUI      &sk LSHFT     &sk LCTRL        &none              &kp F11             &kp F4           &kp F5                   &kp F6        &kp F10
                   &none         &none         &none         &none            &none              &kp F12             &kp F1           &kp F2                   &kp F3        &none
		   /*&           &*/           &kp ESC       &kp BSPC         &kp TAB            &kp RET             &kp SPACE        &kp DEL                  /*&           &*/
			>;
		};
		
		dbg_layer {
			bindings = <
                   &none        &none         &none              &none              &none              &none               &none            &none                   &none         &none
                   &tog DBG_L   &none         &none              &kp LS(F8)         &none              &kp LC(LS(F9))      &kp F7           &kp F8                  &none         &tog DBG_L
                   &none        &none         &none              &none              &none              &none               &none            &kp LA(LS(N9))          &none         &none 
                   /*&          &*/           &base_lt NAV_L ESC &kp LC(F2)         &tog DBG_L         &kp LS(F9)          &kp F9           &kp LC(F8)              /*&           &*/
			>;
		};
		
		nav_layer {
			bindings = <
                   &bt BT_CLR_ALL  &bt BT_CLR      &bt BT_SEL 0      &bt BT_PRV         &bt BT_NXT         &kp LC(MINUS)       &kp LC(PLUS)     &col_sel              &kp K_VOL_DN    &kp K_VOL_UP
                   &lhm LALT LC(Z) &lhm LGUI LC(X) &qhm LSHIFT LC(C) &qhm LCTRL LC(V)   &kp LA(TAB)        &kp K_PP            &kp LEFT         &kp UP                &kp RIGHT       &kp PG_UP
                   &none           &none           &kp LC(LS(C))     &kp LC(LS(V))      &kp K_PREV         &kp K_NEXT          &kp HOME         &kp DOWN              &kp END         &kp PG_DN
                   /*&             &*/             &tog NAV_L        &kp BSPC           &kp TAB            &kp RET             &kp SPACE        &kp DEL               /*&             &*/
			>;
		};
		
		col_sel_layer {
			bindings = <
                   &none        &none         &none           &none              &none              &none               &none            &deact_col_esc          &none         &none
                   &kp Z        &kp X         &kp C           &kp V              &none              &none               &kp LEFT         &kp UP                  &kp RIGHT     &none
                   &none        &none         &none           &none              &none              &none               &kp HOME         &kp DOWN                &kp END       &none 
                   /*&          &*/           &deact_col_esc  &kp BSPC           &kp TAB            &kp RET             &deact_col       &deact_col              /*&           &*/
			>;
		};
		
		ita_layer {
			bindings = <
                   &none        &none         &none         &none              &none              &none               &none            &td_u                   &none         &none
                   &td_a        &none         &mo ITA_C_L   &none              &none              &none               &none            &macro_lt ITA_C_L 0     &td_i         &td_o
                   &none        &none         &c_e          &none              &none              &none               &none            &none                   &none         &none 
                   /*&          &*/           &kp ESC       &kp BSPC           &kp TAB            &kp RET             &kp SPACE        &kp DEL                  /*&           &*/
			>;
		};
		
		ita_layer_capital {
			bindings = <
                   &none         &none         &none         &none              &none              &none               &none            &td_u_capital           &none         &none
                   &td_a_capital &none         &none         &none              &none              &none               &none            &td_e_capital           &td_i_capital &td_o_capital
                   &none         &none         &capital_c_e  &none              &none              &none               &none            &none                   &none         &none 
                   /*&          &*/            &kp ESC       &kp BSPC           &kp TAB            &kp RET             &kp SPACE        &kp DEL                 /*&           &*/
			>;
		};		
	};
};

